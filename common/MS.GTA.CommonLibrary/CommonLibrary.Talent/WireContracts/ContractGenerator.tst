//---------------------------------------------------------------------------
// <copyright company="Microsoft Corporation">
// Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// This file is auto-generated by the CommonLibrary.Talent/TalentContracts/ContractGenerator.tst script.
//---------------------------------------------------------------------------
${
    Template(Settings settings)
    {
        settings.OutputFilenameFactory = file =>
        {
            return $"{file.Name.Replace(".g.cs", ".ts").Replace(".cs", ".ts")}";
        };
    }

    string GetClassName(Class c)
    {
        return c.Name;
    }
    
    string GetEnumName(Enum e)
    {
        return e.Name;
    }
     
    string GetTypeName(Type t)
    {
        if (t.IsEnumerable && t.TypeArguments?.Count == 1 && GetTypeName(t.TypeArguments[0]) != t.TypeArguments[0])
        {
            return GetTypeName(t.TypeArguments[0]) + "[]";
        }
        else if (t.IsGeneric && !t.TypeArguments.All(a => a == null || GetTypeName(a) == a.Name))
        {
            return t.OriginalName + "<" + string.Join(", ", t.TypeArguments.Select(GetTypeName)) + ">";
        }
        else if (t.Namespace == "Microsoft.CommonDataService.CommonEntitySets")
        {
            return "CommonEntity" + t;
        }
        else if (t.Namespace == "Microsoft.CommonDataService" && t == "CountryCode")
        {
            return "CommonEntity" + t;
        }
        else if (t.Namespace == "Microsoft.CommonDataService" && t.Name == "LargeText")
        {
            return "string";
        }
        else if(t.Name =="Json")
        {
          return "string";
        }

        return t;
    }

    string GetPropertyType(string typeName)
    {
        Console.WriteLine(typeName);
        switch(typeName)
        {
            case "IFormFile": return "File";
            case "IFormFile[]": return "File[]";
            default: return typeName;
        }
    }

    string PrintPropertyWithType(Property p)
    {
        string typeName = GetTypeName(p.Type);

        string attributeValue = p.Attributes?.FirstOrDefault(a => a.Name == "DataMember")?.Value;
        string attributeValueNameAssignment = attributeValue?.Split(',')?.Select(v => v.Trim())?.FirstOrDefault(v => v.StartsWith("Name = "));
        string propertyName = attributeValueNameAssignment?.Substring(8, attributeValueNameAssignment.Length - 9);

        if (propertyName == null)
        {
            propertyName = p.Name;
        }

       if (p.Attributes.Any(attribute =>
            attribute.Name == "RelationalField"
            || attribute.Value.Contains("IsRequired = false")))
        {
            return propertyName + "?: " + GetPropertyType(typeName);
        }
        else
        {
            return propertyName + ": " + GetPropertyType(typeName);
        }
    }
}$Classes(c =>
    c.Attributes.Any(a => a.Name == "DataContract")
    && c.BaseClass == null 
    && c.Name != "AdditionalMetadataValue"
    && c.Name != "OpenTypeExtension"
    && c.Name != "CalendarEvent"
    && c.Name != "CalendarEvents"
    && c.Name != "AttachmentResponse"
    && (c.Namespace == "CommonLibrary.Common.TalentAttract.Contract" || 
    c.Namespace == "CommonLibrary.Talent.TalentContracts.TeamsIntegration" ||
    c.Namespace == "CommonLibrary.ScheduleService.Contracts.V1" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.ScheduleService" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.ScheduleService.Conferencing" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.Flighting" ||
    c.Namespace == "CommonLibrary.Common.Contracts" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.TalentMatch"||
    c.Namespace == "CommonLibrary.Common.TalentEntities.Common" ||
    (c.Namespace == "CommonLibrary.Common.SchedulingService.Contracts" && c.Name !="EmailTemplate") ||
    (c.Namespace == "CommonLibrary.Common.Provisioning.Entities.FalconEntities.Attract" && c.Name == "JobApplicationParticipant") ||
    c.Namespace == "CommonLibrary.Talent.EnumSetModel.SchedulingService"  ||
    c.Namespace == "CommonLibrary.Common.EnvironmentSettings.Contracts" ||
    c.Namespace == "CommonLibrary.Common.Email.Contracts" ||
    c.Namespace == "CommonLibrary.Common.Web.Contracts" ||
	c.Namespace == "CommonLibrary.Talent.TalentContracts.InterviewService" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.QueryStringParameters")
    || c.Name == "OfferUser"
    || (c.name == "JobPost" || c.name == "Source" || c.name == "CurrencyCode"
        || c.name == "JobOfferStatusReason"
        || c.name == "FlightingContextType"
    ))[
export interface $GetClassName {$Properties(p => p.Attributes.Any(a => a.Name != "IgnoreDataMember"))[
    $PrintPropertyWithType;]
}
]$Classes(c =>
    c.Attributes.Any(a => a.Name == "DataContract")
    && c.BaseClass != null && (c.Namespace == "CommonLibrary.Common.TalentAttract.Contract" || 
    c.Namespace == "CommonLibrary.ScheduleService.Contracts.V1" ||    
    c.Namespace == "CommonLibrary.Common.Contracts" ||
    c.Namespace == "CommonLibrary.Common.Web.Contracts" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.Flighting" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.ScheduleService" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.InterviewService" ||
    c.Namespace == "CommonLibrary.Talent.TalentContracts.QueryStringParameters")
    && c.Name != "ThirdPartyJobPost")[
export interface $GetClassName extends $BaseClass {$Properties[
    $PrintPropertyWithType;]
}
]$Enums(e =>
    e.Attributes.Any(attr => attr.Name == "EnumSet" || attr.Name == "DataContract")
   )[
export enum $GetEnumName {$Values[
    $Name = $Value,]
}
]
